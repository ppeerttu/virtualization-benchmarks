#!/bin/bash

source config.sh
set -e

run_as_boot_time_test="false"
if [ "$1" == "--boot-time-test" ]; then
    run_as_boot_time_test="true"
fi

uuid=$(uuidgen)
srv_dir=/srv/jailer
jailer=$firecracker_dir/jailer
firecracker=$firecracker_dir/firecracker
chroot_dir=$srv_dir/firecracker/$uuid/root
run_dir=$chroot_dir/run
socket=$run_dir/firecracker.socket
tap_device=$tap_name
device_mac=$(cat /sys/class/net/$tap_name/address)
uid=$(id -u)
gid=$(id -g)

# For the boot time test
ping_vm() {
    until ping -c1 $client_ip >/dev/null 2>&1; do :; done
}

launch_vm() {
    sh cmd/start_vm.sh
}

stop_vm() {
    sh cmd/stop_vm.sh
}

run_iteration() {
    launch_vm & (time ping_vm) &>> $LOGFILE_NAME
    # Sleep in between just in case
    sleep 5
    stop_vm
    # Sleep in between just in case
    sleep 5
}

run_test() {
    for ((i=1; i<=$ITERATIONS;i++)); do
        run_iteration
    done
}

sudo mkdir -p $srv_dir

if [ ! -z ${guest_id+x} ]; then
    log_error "Existing guest with id $guest_id found. Please clean up the existing guest before launching a new one."
    exit 1
fi

log_info "Starting jailer with ID $uuid..."

sudo $jailer \
    --id $uuid \
    --node 0 \
    --exec-file $firecracker \
    --uid $uid \
    --gid $gid \
    --daemonize &

log_info "Firecracker and jailer launching, waiting for a while..."


i=0
while [ ! -S $socket ]; do
    if [ $i -gt 5 ]; then
        log_info "Firecracker socket still unavailable. Exiting without cleanup."
        exit 1
    fi
    sleep 2
    ((i=i+1))
done

log_info "Firecracker socket found"

export SOCKET=$socket
export TAP_DEVICE=$tap_device
export DEVICE_MAC=$device_mac
export KERNEL_PATH=$kernel_file_name
export ROOTFS_PATH=$rootfs_file_name
export GUEST_MEMORY=$guest_memory
export GUEST_VCPU=$guest_vcpu

log_info "Copying rootfs and kernel to $chroot_dir..."
cp $kernel_file $chroot_dir/$kernel_file_name
cp $rootfs_file $chroot_dir/$rootfs_file_name

log_info "Setting network..."

sh cmd/put_network.sh

log_info "Setting kernel..."

sh cmd/put_kernel.sh

log_info "Setting rootfs..."

sh cmd/put_rootfs.sh

log_info "Setting machine config to $GUEST_VCPU vCPU and $GUEST_MEMORY MiB RAM..."

sh cmd/put_machine_config.sh

log_info "Done. Launching vm..."

if [ $run_as_boot_time_test == "true" ]; then
    log_info "Boot time test flag detected, saving time to $LOGFILE_NAME..."
    launch_vm & (time ping_vm) &>> $LOGFILE_NAME
else
    launch_vm
fi

echo "$uuid" > $guest_id_file

log_info "Done. Wrote the guest vm ID $uuid to $guest_id_file"


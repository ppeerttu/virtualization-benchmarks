#!/bin/bash

set -e

current_dir=$(pwd)
provision_script_name=setup_os.sh
provision_script=$current_dir/$provision_script_name
default_username=perttu
default_password=perttu
default_tz="Europe/Helsinki"
rootfs=ubuntu-rootfs
rootfs_dir=./$rootfs
rootfs_file=$rootfs.ext4
mntdir=/mnt/tmpdir
export rootfs_username=${USERNAME:-$default_username}
rootfs_password=${PASSWORD:-$default_password}
export rootfs_password_encrypted=$(openssl passwd -1 $rootfs_password)
export rootfs_tz=${TIMEZONE:-$default_tz}
export hostname=fvm
export hosts=$(cat <<EOF
127.0.0.1   localhost
127.0.0.1   $hostname
EOF
)
GREEN='\033[0;32m'
NC='\033[0m' # No Color

log_info() {
    printf "%(%Y-%m-%d %H:%M:%S)T - ${GREEN}INFO${NC} - $1\n"
}

log_info "Re-creating directory $rootfs_dir"

rm -rf $rootfs_dir
mkdir $rootfs_dir

log_info "Directory $rootfs_dir created, moving in"

cd $rootfs_dir

log_info "Downloading Ubuntu base"

# Download the Ubuntu base
curl -LOJ http://cdimage.ubuntu.com/ubuntu-base/releases/20.04/release/ubuntu-base-20.04.1-base-amd64.tar.gz

log_info "Allocating rootfs image"

# Allocate rootfs image
dd if=/dev/zero of=$rootfs_file bs=1024 count=1M
mkfs.ext4 -F -L linuxroot $rootfs_file

log_info "Mounting and setting up the image"
mkdir -p $mntdir
sudo mount -o loop $rootfs_file $mntdir

# Unpack the downloaded Ubuntu base image
sudo tar zxvf ubuntu-*.tar.gz -C $mntdir

# Setup the image
sudo cp /etc/resolv.conf $mntdir/etc/
sudo mount -t proc /proc $mntdir/proc
sudo mount -t sysfs /sys $mntdir/sys
sudo mount -o bind /dev $mntdir/dev
sudo mount -o bind /dev/pts $mntdir/dev/pts

# Contents to prepend into the provioning script
vars=$(cat <<EOF
rootfs_password_encrypted="$rootfs_password_encrypted"
rootfs_username="$rootfs_username"
hostname="$hostname"
hosts="$hosts"
rootfs_tz="$rootfs_tz"
EOF
)

# Create a duplicate of the provisioning script
provision_script_new=$provision_script.new
cp $provision_script $provision_script_new
# Prepend privisioning script with variables
printf '%s\n%s\n' "$vars" "$(cat $provision_script_new)" >$provision_script_new

# Copy to the mounted device
sudo cp $provision_script_new $mntdir/$provision_script_name

log_info "The final provisioning script is:"
sudo cat $mntdir/$provision_script_name
sleep 5

# log_info "Running $provision_script in $mntdir..."

# Run inside the image
sudo chroot $mntdir /bin/bash $provision_script_name

# sudo chroot $mntdir /bin/bash <<EOT

# apt-get update
# apt-get install -y \
#     language-pack-en-base \
#     sudo \
#     ssh \
#     net-tools \
#     ethtool \
#     wireless-tools \
#     ifupdown \
#     network-manager \
#     iputils-ping \
#     rsyslog \
#     htop \
#     vim \
#     xinit xorg \
#     alsa-utils \
#     sudo \
#     --no-install-recommends

# useradd -m -p $rootfs_password_encrypted $rootfs_username

# usermod -aG sudo $rootfs_username

# echo "$hostname" > /etc/hostname
# echo "$hosts" > /etc/hosts

# echo "allowed_users=anybody" > /etc/X11/Xwrapper.config

# cp /usr/share/zoneinfo/$rootfs_tz /etc/localtime

# EOT

# Set up group for alsa
# vim /etc/group
# Change 'audio:x:29' and 'video:x:44' to:
# audio:x:29:pulse,dogentu
# video:x:44:dogentu

# Set up group for fbterm
# vim /etc/group

# Exit at this point from chroot:
# exit

log_info "Done. Unmounting..."

# Unmount
sudo umount $mntdir/proc
sudo umount $mntdir/sys
sudo umount $mntdir/dev/pts
sudo umount $mntdir/dev
sudo umount $mntdir

log_info "Unmounting done. Moving out of $(pwd)"

cd -

log_info "All set"

# rootfs=$rootfs_file
# append="root=/dev/sda console=ttyS0"
# kernel=vmlinuz-5.5.0-rc7+
# initrd=initrd.img-5.5.0-rc7+

# firectl \
#     --kernel=../firecracker-guest/hello-vmlinux.bin \
#     --root-drive=$rootfs_file \
#     --kernel-opts="root=/dev/sda ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules"
# qemu-system-x86_64 -m 1024M -nographic -kernel $kernel -append "$append" -hda $rootfs -net nic
